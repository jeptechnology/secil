name: SECIL Build

env:
  IMAGE_NAME: secil
  BUILD_IMAGE: secil:latest
  BUILD_IMAGE_FOUND: 'false'
  IMAGE_TAG: ${{ github.ref_name }}  # X.Y.Z
  TAG_RELEASED: 'false'
  IS_TAG_LATEST: 'true'
  SEMVER_REGEX: '^[0-9]+\.[0-9]+\.[0-9]+'
  DOCKERFILE_PATH: .github/Dockerfile
  DOCKERFILE_UPDATED: 'false'
  CREATE_BUILD_IMAGE: 'true'
  BUILD_SUCCESSFUL: 'false'

on:
  push:
    branches: [ 'main', 'develop', 'release/**' ]
    tags: [ '[0-9]+.[0-9]+.[0-9]+' ]
  pull_request:
    branches: [ 'main', 'develop', 'release/**' ]
  workflow_dispatch:

concurrency:
  # Workflow for multiple yaml files. ref for push and pull_request triggers. run_id for other triggers (fallback)
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  Setup:
    name: Create Docker build environment image
    runs-on:
      # group: firmware-runners
      labels: ubuntu-latest
    permissions:
      contents: read  # Permits an action to read the repository contents
      packages: write  # Permits an action to upload and publish packages to container registry (ghcr.io)
    outputs:
      build_image: ${{ steps.set_outputs.outputs.BUILD_IMAGE }}
      tag_released: ${{ steps.set_outputs.outputs.TAG_RELEASED }}
    steps:

    ### Set up repository and image names and check for tag release

    - name: 1) Checkout secil repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for branches and tags
        fetch-tags: true
        submodules: recursive
        token: ${{ secrets.ACCESS_TOKEN }}

    - name: 2) Set env IMAGE_BASE, IMAGE_LATEST and IMAGE_VERSION
      run: |
        IMAGE_BASE=${{ env.IMAGE_NAME }}
        IMAGE_LATEST=$IMAGE_BASE:latest
        IMAGE_VERSION=$IMAGE_BASE:${{ env.IMAGE_TAG }}
        BUILD_IMAGE=$IMAGE_LATEST

        echo "IMAGE_BASE=$IMAGE_BASE" >> $GITHUB_ENV
        echo "IMAGE_LATEST=$IMAGE_LATEST" >> $GITHUB_ENV
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
        echo "BUILD_IMAGE=$BUILD_IMAGE" >> $GITHUB_ENV

    - name: 3) Check for tag release and latest tag
      # Note: Tag name is guaranteed to be a valid semver version based on the regex tags trigger (on: push: tags:)
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        echo "TAG_RELEASED=true" >> $GITHUB_ENV
        git tag --list
        if [ "$(git tag | grep --extended-regexp "${{ env.SEMVER_REGEX }}" | sort --version-sort | tail --lines=1)" != "${{ env.IMAGE_TAG }}" ]; then
          echo "IS_TAG_LATEST=false" >> $GITHUB_ENV
          echo "BUILD_IMAGE=${{ env.IMAGE_VERSION }}" >> $GITHUB_ENV
        fi

    - name: 4) Set env CREATE_BUILD_IMAGE
      run: |
        docker images --filter reference=${{ env.IMAGE_BASE }}

        BUILD_IMAGE_FOUND=$(docker image inspect --format="ignore" ${{ env.BUILD_IMAGE }} &>/dev/null && echo "true" || echo "false")
        DOCKERFILE_UPDATED=$(git diff --exit-code --no-patch ..origin/${{ github.event.repository.default_branch }} -- ${{ env.DOCKERFILE_PATH }} && echo "false" || echo "true")
        CREATE_BUILD_IMAGE=$([ $BUILD_IMAGE_FOUND == "true" ] && [ $DOCKERFILE_UPDATED == "false" ] && echo "false" || echo "true")

        echo "BUILD_IMAGE_FOUND=$BUILD_IMAGE_FOUND" >> $GITHUB_ENV
        echo "DOCKERFILE_UPDATED=$DOCKERFILE_UPDATED" >> $GITHUB_ENV
        echo "CREATE_BUILD_IMAGE=$CREATE_BUILD_IMAGE" >> $GITHUB_ENV

    ### Build and push Docker image

    - name: 5) Generate Docker image metadata
      if: ${{ env.CREATE_BUILD_IMAGE == 'true' }}
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_BASE }}
        flavor: latest=${{ env.IS_TAG_LATEST }}  # Old version tags/images are created without overriding the latest image
        tags: type=semver,pattern={{version}}

    - name: 6) Set up Docker Buildx
      if: ${{ env.CREATE_BUILD_IMAGE == 'true' }}
      uses: docker/setup-buildx-action@v3

    - name: 7) Build, tag, and store a new Docker image
      if: ${{ env.CREATE_BUILD_IMAGE == 'true' }}
      uses: docker/build-push-action@v6
      with:
        context: .  # ${{ github.workspace }}
        file: ${{ env.DOCKERFILE_PATH }}
        load: true  # Result stored locally in docker images
        push: false  # Result uploaded to container registry (ghcr.io)
        tags: ${{ env.BUILD_IMAGE }},${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: 8) Set GITHUB_OUTPUTs
      id: set_outputs
      run: |
        echo "BUILD_IMAGE=${{ env.BUILD_IMAGE }}" >> $GITHUB_OUTPUT
        echo "TAG_RELEASED=${{ env.TAG_RELEASED }}" >> $GITHUB_OUTPUT

# jobs:
  Build:
    name: Build project
    needs: Setup
    runs-on:
      # group: firmware-runners
      labels: ubuntu-latest
    # Required by Publish Test Results action
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write
    env:
      BUILD_IMAGE: ${{ needs.Setup.outputs.build_image }}
      TAG_RELEASED: ${{ needs.Setup.outputs.tag_released }}
    steps:
      - name: 1) Checkout secil repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for branches and tags
          fetch-tags: true
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: 2) Run Docker container and build project
        run: |
          docker images --filter reference=${{ env.BUILD_IMAGE }}

          [ "${{ env.TAG_RELEASED }}" == "true" ] && BUILD_ARGS="-tcd" || BUILD_ARGS="-tc"

          docker run \
            --interactive \
            --workdir /home/ubuntu/secil \
            --volume ${{ github.workspace }}:/home/ubuntu/secil \
            ${{ env.BUILD_IMAGE }} \
            bash -c "./build_project.sh $BUILD_ARGS"

          echo "BUILD_SUCCESSFUL=true" >> $GITHUB_ENV

      # - name: 3) Publish unit test results
      #  uses: EnricoMi/publish-unit-test-result-action@v2
      #  if: always()
      #  with:
      #    files: build/host/secil.test.xml

      - name: 4) Publish a GitHub release with changelog and binary artefacts
        if: ${{ env.TAG_RELEASED == 'true' && env.BUILD_SUCCESSFUL == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          # name: default title is the tag name "X.Y.Z"
          token: ${{ secrets.ACCESS_TOKEN }}
          generate_release_notes: true
          files: |
            ${{ github.workspace }}/build/install/secil_install.zip
